/*
 * This file is generated by jOOQ.
*/
package jooq.objects.tables;


import enums.Role;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import jooq.converters.RoleConverter;
import jooq.converters.TimestampToLocalDateTimeConverter;
import jooq.objects.CrmSchema;
import jooq.objects.Keys;
import jooq.objects.tables.records.UserRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 422300994;

    /**
     * The reference instance of <code>crm_schema.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>crm_schema.user.id</code>.
     */
    public final TableField<UserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('crm_schema.user_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>crm_schema.user.uuid</code>.
     */
    public final TableField<UserRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>crm_schema.user.name</code>.
     */
    public final TableField<UserRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>crm_schema.user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm_schema.user.password</code>.
     */
    public final TableField<UserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm_schema.user.secret</code>.
     */
    public final TableField<UserRecord, String> SECRET = createField("secret", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm_schema.user.role</code>.
     */
    public final TableField<UserRecord, Role> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.length(5).nullable(false).defaultValue(org.jooq.impl.DSL.field("'USER'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "", new RoleConverter());

    /**
     * The column <code>crm_schema.user.token</code>.
     */
    public final TableField<UserRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>crm_schema.user.token_expiration</code>.
     */
    public final TableField<UserRecord, LocalDateTime> TOKEN_EXPIRATION = createField("token_expiration", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampToLocalDateTimeConverter());

    /**
     * The column <code>crm_schema.user.active</code>.
     */
    public final TableField<UserRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>crm_schema.user.created</code>.
     */
    public final TableField<UserRecord, LocalDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampToLocalDateTimeConverter());

    /**
     * The column <code>crm_schema.user.modified</code>.
     */
    public final TableField<UserRecord, LocalDateTime> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampToLocalDateTimeConverter());

    /**
     * Create a <code>crm_schema.user</code> table reference
     */
    public User() {
        this("user", null);
    }

    /**
     * Create an aliased <code>crm_schema.user</code> table reference
     */
    public User(String alias) {
        this(alias, USER);
    }

    private User(String alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(String alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CrmSchema.CRM_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.USER_PKEY, Keys.USER_UUID_KEY, Keys.USER_EMAIL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(name, null);
    }
}
